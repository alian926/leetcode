/** 
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。

!!!但是不能连续走两步,

你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

*/

/**
 * @param {number} n
 * @return {number}
 */
//递归加上状态转移,  根据条件执行不同的参数,获得不同的结果
function climbStairs(n, status) {
    if (n < 0)
        return 0;
    if (n == 1)
        return 1;
    if (n == 2) { 		//当用户的阶梯只剩下2的时候，就需要判断最后一次走的状态（是一步还是两步）
        if (status == 1 || status == 0 ) {			//当状态是1或者是0的话，剩余的走法就还有两种（分别走两步和一次性走两步）
            return 2
        }
        if (status == 2) {			//当状态是2的话，剩余的走法就只有一种（走一步）
            return 1
        }
    }
    if (n > 2) {		//当阶梯大于2的时候
        if (status == 0) {		//状态为0的时候，就相当于是如图中的底层，分为两个方向相加f(n-1)和f(n-2)，但是需要将本次走的状态传递过去（需要使用递归，自己调用自己）
            return climbStairs(n - 1, 1) + climbStairs(n - 2, 2)	
        }
        if (status == 1) {			//状态为1的时候，就相当于是如图中的底层的左边部分，又是分为两个方向相加f(n-1)和f(n-2)，同样需要将本次次走的状态传递过去
            return climbStairs(n - 1, 1) + climbStairs(n - 2, 2);
        }
        if (status == 2) {		//状态为2的时候，就相当于是如图中的底层的右边部分，这里就只能有一种的走法了，所以递归过去的值就只剩下了f(n-1)
            return climbStairs(n - 1, 1);
        }
    }
}
  console.log(climbStairs(7, 0))